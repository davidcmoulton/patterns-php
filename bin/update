#!/usr/bin/env php
<?php

use GitWrapper\Event\GitOutputStreamListener;
use GitWrapper\GitWorkingCopy;
use GitWrapper\GitWrapper;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\ProcessBuilder;

require_once __DIR__ . '/../vendor/autoload.php';

$sourceDir = __DIR__ . '/../pattern-library';
$outputDir = __DIR__ . '/../resources';
$filesystem = new Filesystem();
$wrapper = new GitWrapper();
$wrapper->addOutputListener(new GitOutputStreamListener());

if (false === is_dir($sourceDir)) {
    $repo = $wrapper->cloneRepository('git@github.com:elifesciences/pattern-library.git', $sourceDir);
} else {
    $repo = new GitWorkingCopy($wrapper, $sourceDir);
    if ($repo->hasChanges()) {
        $repo->reset(['hard' => true]);
    }
    $repo->pull();
}

ProcessBuilder::create()
    ->setArguments(['npm', 'install'])
    ->setWorkingDirectory($sourceDir)
    ->setTimeout(180)
    ->getProcess()
    ->enableOutput()
    ->mustRun(function ($type, $buffer) {
        if (Process::ERR === $type) {
            echo 'ERR > ' . $buffer;
        } else {
            echo 'OUT > ' . $buffer;
        }
    })
;

ProcessBuilder::create()
    ->setArguments(['gulp'])
    ->setWorkingDirectory($sourceDir)
    ->getProcess()
    ->enableOutput()
    ->mustRun(function ($type, $buffer) {
        if (Process::ERR === $type) {
            echo 'ERR > ' . $buffer;
        } else {
            echo 'OUT > ' . $buffer;
        }
    })
;

$filesystem->mirror($sourceDir . '/source/assets', $outputDir . '/assets', null,
    ['override' => true, 'delete' => true]);
$filesystem->remove($outputDir . '/assets/img/fixtures/');

$patternDir = $sourceDir . '/source/_patterns';

$finder = (new Finder())->files()->in($patternDir)->name('*.yaml');

$filesystem->remove($outputDir . '/definitions/');
$filesystem->remove($outputDir . '/templates/');

foreach ($finder as $file) {
    $filesystem->copy($file->getRealPath(), $outputDir . '/definitions/' . $file->getFilename(), true);
    $template = new SplFileInfo(substr($file->getRealPath(), 0, -4) . 'mustache');
    $filesystem->copy($template->getRealPath(), $outputDir . '/templates/' . $template->getFilename(), true);
}
